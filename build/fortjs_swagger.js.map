{"version":3,"sources":["webpack://fortjs-swagger/webpack/bootstrap","webpack://fortjs-swagger/./src/decorators/body.ts","webpack://fortjs-swagger/./src/decorators/ignore_property.ts","webpack://fortjs-swagger/./src/decorators/index.ts","webpack://fortjs-swagger/./src/decorators/query.ts","webpack://fortjs-swagger/./src/decorators/response.ts","webpack://fortjs-swagger/./src/decorators/swagger_model.ts","webpack://fortjs-swagger/./src/enums/data_type.ts","webpack://fortjs-swagger/./src/enums/index.ts","webpack://fortjs-swagger/./src/global.ts","webpack://fortjs-swagger/./src/handlers/swagger_handler.ts","webpack://fortjs-swagger/./src/helpers/extract_model.ts","webpack://fortjs-swagger/./src/helpers/get_data_type.ts","webpack://fortjs-swagger/./src/index.ts","webpack://fortjs-swagger/./src/models/index.ts","webpack://fortjs-swagger/./src/models/swagger.ts","webpack://fortjs-swagger/external \"fortjs\""],"names":[],"mappings":"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","file":"fortjs_swagger.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { SwaggerHandler } from \"../handlers/swagger_handler\";\r\nimport { DATA_TYPE } from \"../enums/data_type\";\r\n\r\nexport const Body = (variableName: string, type: DATA_TYPE): MethodDecorator => {\r\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n        const className = (target.constructor.name as string);\r\n        SwaggerHandler.saveQuery(className, methodName, {\r\n            type: type,\r\n            variableName: variableName\r\n        })\r\n    };\r\n}","import { SwaggerHandler } from \"../handlers/swagger_handler\";\r\n\r\nexport const IgnoreProperty = (target: any, propertyName: string, descriptor: PropertyDescriptor) => {\r\n    const className = (target.constructor.name as string);\r\n    SwaggerHandler.addIgnoreProperty(className, propertyName);\r\n};","export * from './body';\r\nexport * from './ignore_property';\r\nexport * from './query';\r\nexport * from './response';\r\nexport * from './swagger_model';","import { SwaggerHandler } from \"../handlers/swagger_handler\";\r\nimport { DATA_TYPE } from \"../enums/data_type\";\r\n\r\nexport const Query = (variableName: string, type: DATA_TYPE): MethodDecorator => {\r\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n        const className = (target.constructor.name as string);\r\n        SwaggerHandler.saveQuery(className, methodName, {\r\n            type: type,\r\n            variableName: variableName\r\n        })\r\n    };\r\n}","import { HTTP_STATUS_CODE, MIME_TYPE } from \"fortjs\";\r\nimport { SwaggerHandler } from \"../handlers/swagger_handler\";\r\nimport { getDataType } from \"../helpers/get_data_type\";\r\nimport { extractAndSaveModel } from \"../helpers/extract_model\";\r\nimport { SwaggerResponse, SwaggerModelResponse, SwaggerCustomTypeResponse } from \"../types/swagger_response\";\r\nimport { DATA_TYPE } from \"../enums\";\r\n\r\nexport const Response = (statusCode: HTTP_STATUS_CODE, value: any, contentType?: MIME_TYPE): MethodDecorator => {\r\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n        const className = (target.constructor.name as string);\r\n        const modelName = extractAndSaveModel(value);\r\n        const responseValue = getResponseValue(value);\r\n        const saveResponse = (mimeType) => {\r\n            SwaggerHandler.saveResponse(className, methodName, mimeType, {\r\n                statusCode: statusCode,\r\n                value: responseValue\r\n            })\r\n        };\r\n        //responseValue.description = contentType;\r\n        if (modelName.length > 0) {\r\n            [MIME_TYPE.Json, MIME_TYPE.Xml].forEach(type => {\r\n                saveResponse(type);\r\n            });\r\n        }\r\n        else {\r\n            if (contentType == null) {\r\n                contentType = MIME_TYPE.Text;\r\n            }\r\n            saveResponse(contentType);\r\n        }\r\n    };\r\n}\r\n\r\nconst getResponseValue = (value) => {\r\n    const modelName = extractAndSaveModel(value);\r\n    const dataType = getDataType(value);\r\n    if (modelName.length > 0) { // value is model\r\n        const modelRefString = `#/models/${modelName}`;\r\n        const swaggerModelSchema: SwaggerModelResponse = {\r\n            $ref: modelRefString\r\n        };\r\n        if (dataType === DATA_TYPE.Function) {\r\n            return {\r\n                schema: swaggerModelSchema\r\n            } as SwaggerResponse;\r\n        }\r\n        else {\r\n            return {\r\n                schema: {\r\n                    type: DATA_TYPE.Array,\r\n                    items: swaggerModelSchema\r\n                } as SwaggerCustomTypeResponse\r\n            } as SwaggerResponse;\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            schema: {\r\n                type: dataType,\r\n                example: value\r\n            } as SwaggerCustomTypeResponse\r\n        } as SwaggerResponse;\r\n    }\r\n}","import { SwaggerHandler } from \"../handlers/swagger_handler\";\r\n\r\n// export const responseModel = (): ClassDecorator => {\r\n//     return (target: any) => {\r\n//         const className = target.name;\r\n//         SwaggerHandler.saveModel({\r\n//             classInstance: new target(),\r\n//             className: className,\r\n//             ignoredProperty: []\r\n//         })\r\n//     }\r\n// }\r\n\r\nexport const SwaggerModel = (target: any) => {\r\n    const className = target.name;\r\n    SwaggerHandler.saveModel({\r\n        classInstance: new target(),\r\n        className: className,\r\n        ignoredProperty: []\r\n    })\r\n}","export enum DATA_TYPE {\r\n    String = \"string\",\r\n    Number = \"number\",\r\n    Array = \"array\",\r\n    Object = \"object\",\r\n    Function = \"function\"\r\n}","export * from './data_type';","import { RouteInfo } from \"fortjs\";\r\n\r\nexport class Global {\r\n    static routes: RouteInfo[] = [];\r\n}","import { SwaggerInfo } from \"../types/swagger_route_info\";\r\nimport { ResponseInfo } from \"../types/response_info\";\r\nimport { QueryInfo } from \"../types/query_info\";\r\nimport { WorkerInfo } from \"../types/worker_info\";\r\nimport { BodyInfo } from \"../types/body_info\";\r\nimport { SwaggerModelInfo } from \"../types/swagger_model_info\";\r\nimport { MIME_TYPE } from \"fortjs\";\r\n\r\nconst swaggerRoutes: SwaggerInfo[] = [];\r\nconst swaggerModels: SwaggerModelInfo[] = [];\r\n\r\nconst getNewWorker = (methodName: string) => {\r\n    return {\r\n        body: {},\r\n        file: {},\r\n        methodName: methodName,\r\n        query: {},\r\n        response: {}\r\n    } as WorkerInfo\r\n}\r\nexport class SwaggerHandler {\r\n    static saveResponse(className: string, methodName: string, contentType: MIME_TYPE, response: ResponseInfo) {\r\n        const value = swaggerRoutes.find(qry => qry.className === className);\r\n        const worker = getNewWorker(methodName);\r\n        worker.response[response.statusCode] = {\r\n            [contentType]: response.value\r\n        }\r\n        if (value == null) {\r\n            swaggerRoutes.push({\r\n                className: className,\r\n                workers: [worker]\r\n            })\r\n        }\r\n        else {\r\n            const savedWorker = value.workers.find(qry => qry.methodName === methodName);\r\n            if (savedWorker != null) { // add another response for that worker\r\n                if (savedWorker.response[response.statusCode] == null) {\r\n                    savedWorker.response[response.statusCode] = {};\r\n                }\r\n                savedWorker.response[response.statusCode][contentType] = response.value;\r\n            }\r\n            else { //add the worker\r\n                value.workers.push(worker);\r\n            }\r\n        }\r\n    }\r\n\r\n    static saveQuery(className: string, methodName: string, query: QueryInfo) {\r\n        const value = swaggerRoutes.find(qry => qry.className === className)\r\n        if (value == null) {\r\n            const worker = getNewWorker(methodName);\r\n            worker.query = query;\r\n            swaggerRoutes.push({\r\n                className: className,\r\n                workers: [worker]\r\n            })\r\n        }\r\n        else {\r\n            const savedWorker = value.workers.find(qry => qry.methodName === methodName);\r\n            if (savedWorker != null) {\r\n                savedWorker.query[query.variableName] = query.type;\r\n            }\r\n        }\r\n    }\r\n\r\n    static saveBody(className: string, methodName: string, body: BodyInfo) {\r\n        const value = swaggerRoutes.find(qry => qry.className === className)\r\n        if (value == null) {\r\n            const worker = getNewWorker(methodName);\r\n            worker.body = body;\r\n            swaggerRoutes.push({\r\n                className: className,\r\n                workers: [worker]\r\n            })\r\n        }\r\n        else {\r\n            const savedWorker = value.workers.find(qry => qry.methodName === methodName);\r\n            if (savedWorker != null) {\r\n                savedWorker.body[body.variableName] = body.type;\r\n            }\r\n        }\r\n    }\r\n\r\n    static saveModel(model: SwaggerModelInfo) {\r\n        const value = swaggerModels.find(qry => qry.className === model.className);\r\n        if (value == null) {\r\n            swaggerModels.push(model);\r\n        }\r\n        else {\r\n            value.classInstance = model.classInstance;\r\n        }\r\n    }\r\n\r\n    static addIgnoreProperty(className: string, propertyName: string) {\r\n        const value = swaggerModels.find(qry => qry.className === className);\r\n        if (value == null) {\r\n            swaggerModels.push({\r\n                classInstance: null,\r\n                className: className,\r\n                ignoredProperty: [propertyName]\r\n            });\r\n        }\r\n        else {\r\n            value.ignoredProperty.push(propertyName);\r\n        }\r\n    }\r\n\r\n    static get routes() {\r\n        return swaggerRoutes;\r\n    }\r\n\r\n    static get models() {\r\n        return swaggerModels;\r\n    }\r\n}","import { getDataType } from \"./get_data_type\";\r\nimport { DATA_TYPE } from \"../enums\";\r\nimport { SwaggerHandler } from \"../handlers/swagger_handler\";\r\nimport { SwaggerModelInfo } from \"../types/swagger_model_info\";\r\n\r\nexport const extractAndSaveModel = (value) => {\r\n    let className = \"\";\r\n    const type = getDataType(value);\r\n    const saveModelInfo = (modelValue) => {\r\n        const model = getModelinfo(modelValue);\r\n        if (model != null) {\r\n            SwaggerHandler.saveModel(model);\r\n            className = model.className;\r\n        }\r\n    }\r\n\r\n    if (type === DATA_TYPE.Function) {\r\n        saveModelInfo(value);\r\n    }\r\n    else if (type === DATA_TYPE.Array && value.length > 0) {\r\n        const firstValue = value[0];\r\n        if (getDataType(firstValue) === DATA_TYPE.Function) {\r\n            saveModelInfo(firstValue);\r\n        }\r\n    }\r\n    return className;\r\n}\r\n\r\nconst getModelinfo = (value) => {\r\n    try {\r\n        const model = new value();\r\n        return {\r\n            classInstance: model,\r\n            className: model.constructor.name,\r\n            ignoredProperty: []\r\n        } as SwaggerModelInfo;\r\n    }\r\n    catch (ex) {\r\n\r\n    }\r\n    return null;\r\n}","import { DATA_TYPE } from \"../enums\";\r\n\r\nexport const getDataType = (value) => {\r\n    const type = typeof value;\r\n    switch (type) {\r\n        case 'object':\r\n            if (Array.isArray(value)) {\r\n                return DATA_TYPE.Array;\r\n            }\r\n        default:\r\n            return type;\r\n    }\r\n}","export * from './models/index';\r\nexport * from './decorators/index';\r\nexport * from './enums/index'","export * from './swagger';","import { Router } from \"fortjs\";\r\nimport { Global } from \"../global\";\r\nimport { SwaggerHandler } from \"../handlers/swagger_handler\";\r\nimport { FileHelper } from \"../helpers/file_helper\";\r\n\r\n\r\nexport type SwaggerOption = {\r\n    extension: string;\r\n    srcFolder: string;\r\n}\r\n\r\nexport class Swagger extends Router {\r\n    constructor() {\r\n        super();\r\n        Global.routes = this.routes;\r\n    }\r\n    async create(option?: SwaggerOption) {\r\n        // const extension = this.getExtension_(option.extension);\r\n        // if (extension == null) {\r\n        //     throw \"Invalid Files extension. Allowed extension are - ts, js.\"\r\n        // }\r\n        // const files = await FileHelper.getAllFilesFrom(option.srcFolder);\r\n        // if (files.length > 0) {\r\n        //     const filterFiles = FileHelper.filterFiles(files, option.extension);\r\n\r\n        // }\r\n        // else {\r\n        //     throw `No files found in directory - ${option.srcFolder}`;\r\n        // }\r\n        console.log(\"routes\", JSON.stringify(SwaggerHandler.routes));\r\n        console.log(\"models\", SwaggerHandler.models);\r\n    }\r\n\r\n    private getExtension_(extension: string) {\r\n        switch (extension) {\r\n            case \".ts\":\r\n            case \"ts\":\r\n                return \".ts\";\r\n            case \".js\":\r\n            case \"js\":\r\n                return \".js\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n}","module.exports = require(\"fortjs\");"],"sourceRoot":""}